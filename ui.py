# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import operator
from tkinter import Frame
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import * 
from PyQt6.QtGui import * 
from PyQt6.QtCore import * 
from cgitb import text
from typing import Dict
from nltk.tokenize import word_tokenize
from nltk.cluster import cosine_distance
import numpy as np
from gensim.models.doc2vec import Doc2Vec
from BagOfWord import Processamento, Tokenizacao
from Documentos import GetArquivos, PrintArquivosResultado
from WordEmbeddings import similarity, loadDocData, getFileName
from bagOfWords import *

class Ui_Goospel(object):
    def setupUi(self, Goospel):
        Goospel.setObjectName("Goospel")
        Goospel.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(Goospel)
        self.centralwidget.setObjectName("centralwidget")

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1920, 1080))
        self.frame.setAutoFillBackground(True)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")

        # logo Goospel
        self.label_logo = QtWidgets.QLabel(self.frame)
        self.label_logo.setGeometry(QtCore.QRect(484, 40, 311, 71))
        self.label_logo.setObjectName("label")
        self.pixmap_logo = QtGui.QPixmap('/home/pedro/Documentos/sri/assets/logo.png')
        self.label_logo.setPixmap(self.pixmap_logo.scaled(311, 71, QtCore.Qt.AspectRatioMode.KeepAspectRatio))

        # imagem do emoji amem
        self.label_amem = QtWidgets.QLabel(self.frame)
        self.label_amem.setGeometry(QtCore.QRect(444, 50, 40, 40))
        self.label_amem.setObjectName("label")
        self.pixmap_amem = QtGui.QPixmap('/home/pedro/Documentos/sri/assets/amem.png')
        self.label_amem.setPixmap(self.pixmap_amem.scaled(40, 40, QtCore.Qt.AspectRatioMode.KeepAspectRatio))

        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(474, 120, 221, 31))
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(696, 120, 31, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setIcon(QIcon('/home/pedro/Documentos/sri/assets/lupa.png'))
        self.pushButton.clicked.connect(self.search_handler)

        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(455, 210, 291, 80))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")

        self.label_2 = QtWidgets.QLabel(self.frame_2)
        self.label_2.setGeometry(QtCore.QRect(30, 10, 57, 14))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setGeometry(QtCore.QRect(190, 10, 57, 14))
        self.label_3.setObjectName("label_3")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 31, 81, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setEnabled(False)

        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(170, 31, 81, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setEnabled(False)

        self.widget = QtWidgets.QWidget(self.frame)
        self.widget.setGeometry(QtCore.QRect(474, 180, 260, 22))
        self.widget.setObjectName("widget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.widget)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.widget)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout.addWidget(self.radioButton_2)

        self.scroll = QScrollArea(self.frame)
        self.scroll.setWidgetResizable(True)
        self.scroll.setGeometry(QtCore.QRect(0, 300, 1280, 420))
        self.scroll_widget = QWidget()
        self.scroll_layout = QVBoxLayout(self.scroll_widget)
        self.scroll_layout.setSpacing(5)

        Goospel.setCentralWidget(self.centralwidget)

        self.retranslateUi(Goospel)
        QtCore.QMetaObject.connectSlotsByName(Goospel)

    def search_handler(self):
        if self.lineEdit.text():
            if self.radioButton_2.isChecked():
                search_text = self.lineEdit.text()
                result = self.wordEmbeddings(search_text)
                print('{} documentos foram retornados'.format(len(result)))
                self.showResults(result)

            elif self.radioButton.isChecked():
                search_text = self.lineEdit.text()
                result = self.bagOfWords(search_text)
                print('{} documentos foram retornados'.format(len(result)))
                self.showResults(result)
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Icon.Warning)
                msg.setText("Escolha o mÃ©todo de pesquisa")
                msg.setWindowTitle("ERRO")
                returnValue = msg.exec()
                if returnValue == QtWidgets.QMessageBox.StandardButton.Ok:
                    pass
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Icon.Warning)
            msg.setText("Busca vazia. Insira algo.")
            msg.setWindowTitle("ERRO")
            returnValue = msg.exec()
            if returnValue == QtWidgets.QMessageBox.StandardButton.Ok:
                pass

    def wordEmbeddings(self, search_text):
        print('w2v escolhido.')
        tokens_search = Processamento(word_tokenize(search_text)) #Tokenizar e formatar busca
        print('entrada processada.')
        model = Doc2Vec.load('word2vec_2.model')
        print('modelo carregado.')
        documents_df, tokens= loadDocData() # Lista com Arquivos
        similarity_array = similarity(model, tokens, tokens_search)
        print('similaridade calculada.')
        documents_df['Similaridade'] = similarity_array
        filtered_df = documents_df.query("`Similaridade` >= 0.80")
        results = dict(zip(filtered_df['Texto'], filtered_df['Similaridade']))
        if len(results) == 0:
            results = {'sem resultados': '0.0'}
        return results

    def bagOfWords(self, search_text):
        PesquisaFormatada = Processamento(word_tokenize(search_text)) #Tokenizar e formatar busca
        TokenPesquisa = Token(PesquisaFormatada)
        Arquivos = GetArquivos() # Lista com Arquivos
        Tokens = Tokenizacao(Arquivos) # Map <Texto,Token>
        try:
            resultados = CossenoDistance(TokenPesquisa,Tokens)
            resultados = {key:value for key, value in resultados.items() if value > 0.80} # remove os inferiores a 80%
            resultados = dict(sorted(resultados.items(), key=operator.itemgetter(1),reverse=True))
        except ZeroDivisionError:
            resultados = {'sem resultados': '0.0'}
        return resultados

    def showResults(self, result):
        for doc in result:
            object = QLabel("Similaridade: {}".format(result[doc]))
            self.scroll_layout.addWidget(object)
            object2 = QLabel("Texto : {}".format(doc))
            self.scroll_layout.addWidget(object2)
        self.scroll_widget.setLayout(self.scroll_layout)
        self.scroll.setWidget(self.scroll_widget)

    def retranslateUi(self, Goospel):
        _translate = QtCore.QCoreApplication.translate
        Goospel.setWindowTitle(_translate("Goospel", "MainWindow"))
        self.label_2.setText(_translate("Goospel", "Precision"))
        self.label_3.setText(_translate("Goospel", "Recall"))
        self.radioButton.setText(_translate("Goospel", "Bag of Words"))
        self.radioButton_2.setText(_translate("Goospel", "Word Embeddings"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Goospel = QtWidgets.QMainWindow()
    ui = Ui_Goospel()
    ui.setupUi(Goospel)
    Goospel.show()
    sys.exit(app.exec())
